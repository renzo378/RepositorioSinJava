



<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>GRUPO 1 | JunkodeApp</title>

    <!-- Tell the browser to be responsive to screen width -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- Theme style -->
    <link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="/lib/fontawesome-free/css/all.min.css">
    <!-- overlayScrollbars -->
    <link rel="stylesheet" href="/lib/overlayScrollbars/css/OverlayScrollbars.min.css">
    <!-- Theme style -->
    <link rel="stylesheet" href="/lib/admin-lte/css/adminlte.css">
    <!-- Google Font: Source Sans Pro -->
    <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700" rel="stylesheet">
    <!-- Site CSS -->
    <link rel="stylesheet" href="/css/site.css">
	<!-- IMAGEN DEL LOGO-->
	<link rel="icon" href="/images/junkode_logo.png">

	
    <link rel="stylesheet" href="/css/edit-create-commons.css">
    <link rel="stylesheet" href="/lib/tempusdominus-bootstrap-4/css/tempusdominus-bootstrap-4.min.css">
	
	<link rel="stylesheet" href="/lib/select2/css/select2.css" />
    <link rel="stylesheet" href="/css/select2-fix.css" />

</head>
<body class="hold-transition sidebar-mini layout-fixed">
	<div id="app_menu" class="wrapper">        
        <main-system-menu 
            :menu-top-bar-items="topBarItems" 
            :menu-side-bar-items="sideBarItems" 
            :menu-user-info="userInfo" 
            :menu-app-info="appInfo" 
            :selected-menu="selectedMenu"
            :dark-mode="false">
        </main-system-menu>
    </div>    

	 <div class="content-wrapper">
		
        


<input name="__RequestVerificationToken" type="hidden" value="CfDJ8N69av9pGY1FnJv5Mzn5y1xqrF0b9F3VzhrHC72bUNG9c9mk_raFbm0NFTTLc-4zhZuJHsFLnVxSjVkwuH3Tx6J7oBmG5kzGpKWqW_ZUPg44h7cVacniyIqIWE2_9ZHiT362FVFX-GSIxwK-PC3z8tP7ebUhOsZRcfgfefJme7I1nu9ONROWhQXs9iQSYb6TJg" />

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-8">
                <h1>NEW PROJECT</h1>
            </div>
            <div class="col-sm-4">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item">
                        <a href="/Home">Home</a>
                    </li>
                    <li class="breadcrumb-item active" active>NEW PROJECT</li>
                </ol>
            </div>
        </div>
    </div>
</section>

<div class="row" id="app">
	<div class="col-12 col-md-6">
        <div class="form-group">
            <span class="mr-3 text-dark">Repos</span>
            <select2 v-model="repoData" texto_select="Chose a Repo" :lista_opciones="repoList">
            </select2>
        </div>
    </div>
	<div class="col-12 col-md-6"  v-show="isRepoSelected">
		<div class="form-group">
			<span class="mr-3 text-dark">Branches</span>
			<select2 v-model="branchData" texto_select="Chose a Branch" :lista_opciones="branchList">
			</select2>
		</div>
		<button type="button" class="ml-2 btn btn-secondary float-right" v-on:click="doAnalyze()">DoAnalyze</button>
	</div>
</div>


    </div>

	<div id="app_footer">  
        <main-system-footer :app-info="appInfo"></main-system-footer>
    </div>

	<!-- JQuery-->
    <script src="/lib/jquery/dist/jquery.min.js"></script>

    <!--Popper-->
    <script src="/lib/popper.js/umd/popper.js"></script>

    <!-- Bootstrap 4 -->
    <script src="/lib/bootstrap/dist/js/bootstrap.js"></script>

    <!-- overlayScrollbars -->
    <script src="/lib/overlayScrollbars/js/jquery.overlayScrollbars.min.js"></script>

    <!-- AdminLTE App -->
    <script src="/lib/admin-lte/js/adminlte.js"></script>

    <!-- Vue-->
    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>    

	    <!-- Vue Components-->
    <script type="text/x-template" id="top-menu-template">
    <nav class="main-header navbar navbar-expand navbar-white navbar-light">
            <!-- Left navbar links -->
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
                </li>                
                <div v-for="(item, rowId) in visibleItems" v-bind:key="rowId">                      
                    <li v-if="item.menuItems" class="nav-item dropdown">                        
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-toggle="dropdown"
                            aria-haspopup="true" aria-expanded="false">
                            {{item.title}}
                        </a>
                        <div class="dropdown-menu" aria-labelledby="navbarConcurrentes">
                            <a v-for="(subitem, subItemId) in item.menuItems" v-bind:key="subItemId" class="dropdown-item" v-if="subitem.visible" :href="subitem.url">{{subitem.title}}</a>                                
                        </div>
                    </li>
                    <li v-else class="nav-item d-none d-sm-inline-block">
                        <a :href="item.url" class="nav-link">{{item.title}}</a>
                    </li>
                </div>                
            </ul>


            <!-- Right navbar links -->
            <ul class="navbar-nav ml-auto">
                <!-- Notifications Dropdown Menu -->
                <li class="nav-item">
                    <a href="/Identity/Account/Logout" class="nav-link" role="button">
                        <i class="fas fa-sign-out-alt"></i>
                        Salir
                    </a>
                </li>
            </ul>
        </nav>
</script>
<script>
         Vue.component("top-menu", {
             props: {
                 menuItems: {                    
                    required: true,
                },
             },
             template: "#top-menu-template",    
             computed:{
                  visibleItems: function(){
                      return this.menuItems.filter(m=>m.visible);
                  }
              }
         });
</script>
    <script type="text/x-template" id="sidebar-menu-template">       
        <aside class="main-sidebar sidebar-dark-primary elevation-4 sidebar-bg">
            <!-- Brand Logo -->
            <a :href="appInfo.facebookLink" class="brand-link">
                <img :src="appInfo.logo"
                     class="brand-image img-circle elevation-3">
                <span class="brand-text" :class="appInfo.textClass">{{appInfo.name}}</span>
            </a>

            <!-- Sidebar -->
            <div class="sidebar">
                <!-- Sidebar user -->
                <div class="user-panel mt-3 pb-3 mb-3 d-flex">
                    <div class="info">
                        <a :href="currentUserEditProfileLink" class="d-block" :class="userInfo.textClass" :data-letters="userInfo.userInitials">{{userInfo.userName}}</a>
                    </div>
                </div>

                <!-- Sidebar Menu -->
                <nav class="mt-2" >
                    <ul style="padding-bottom:80px" class="nav nav-pills nav-sidebar flex-column nav-child-indent" data-widget="treeview" role="menu" data-accordion="false">
                        <div v-for="(section, iSection) in visibleItems" v-bind:key="iSection">
                            <li class="nav-header" :class="section.textClass">{{section.title}}</li>
                            <div>
                                <li class="nav-item" v-for="(menuItem, iMenuItem) in section.menuItems" v-bind:key="iSection + '' + iMenuItem"  :class="{active:menuItem.selected}">
                                    <a v-if="menuItem.visible" :id="menuItem.menuId" :href="menuItem.url" class="nav-link"  :class="{active:menuItem.selected}">
                                        <i :class="'fas fa-fw ' + menuItem.icon + ' ' + menuItem.iconClass + ' mr-1'"></i>
                                        <p :class="menuItem.textClass">{{menuItem.title}}</p>
                                    </a>
                                </li>
                            </div>
                        </div>
                    </ul>
                </nav>
                <!-- /.sidebar-menu -->
            </div>
            <!-- /.sidebar -->
        </aside>
</script>
<script>
         Vue.component("sidebar-menu", {
            props: {
                menuItems: {
                    required: true
                },
                appInfo: {
                    type: Object,
                    required: true,
                },                 
                userInfo: {
                    type: Object,
                    required: true,
                }
             },
             template: "#sidebar-menu-template",            
             computed:{
                  currentUserEditProfileLink: function(){
                      return "/Usuarios/Edit/" + this.userInfo.userId
                  },
                  visibleItems: function(){                                
                      return this.menuItems.filter(m=>m.visible);                      
                  }
              }

         });
</script>
    <script type="text/x-template" id="template">           
    <footer class="main-footer">
        <div class="float-right d-none d-sm-block">
            | <b>Versi√≥n</b> {{appInfo.version}}
        </div>        
        <strong class="mr-2">{{appInfo.companyName}}</strong> | <i class="fas fa-map-marker mx-2 "></i> <span class="mr-2"> {{appInfo.companyAddress}} </span> | <i class="fas fa-phone-square-alt px-2"></i> {{appInfo.companyPhone}}
    </footer>
 </script>
<script>
         Vue.component("main-system-footer", {
            props: {
                appInfo: {
                    type: Object,
                    required: true,
                },                 
             },
             template: "#template",            
         });
</script>
    <script type="text/x-template" id="main-system-menu">       
    <div class="wrapper">        
        <top-menu :menu-items="topBarItems"></top-menu>
        <sidebar-menu :menu-items="sideBarItems" :app-info="appInfo" :user-info="userInfo"></sidebar-menu>
    </div>
</script>
<script>
         Vue.component("main-system-menu", {
            props: {
                selectedMenu: {
                    required: true
                },
                menuTopBarItems: {
                    required: true
                },
                menuSideBarItems: {
                    required: true
                },
                menuAppInfo: {
                    type: Object,
                    required: true,
                },                 
                menuUserInfo: {
                    type: Object,
                    required: true,
                },
                darkMode: {
                    type: Boolean,
                    default: true,
                }
             },
             template: "#main-system-menu",            
             data() {
                return {
                    controlerArea: "admin",
                    topBarItems: this.menuTopBarItems,
                    sideBarItems: this.menuSideBarItems,
                    appInfo: this.menuAppInfo,
                    userInfo: this.menuUserInfo
                };
            },
            created() {
                  this.initializeMenu();
            },
            computed:{
                defaultTextClass: function(){
                    return this.darkMode ? "sidebar-menu-item-text-dark" :"sidebar-menu-item-text-light"
                },                
                defaultSelectedTextClass: function(){
                    return this.darkMode ? "sidebar-menu-item-text-selected-dark":"sidebar-menu-item-text-selected-light"
                },
                defaultIconClass: function(){
                    return this.darkMode ? "sidebar-item-icon-dark" :"sidebar-item-icon-light"
                },
                defaultSelectedIconClass: function(){
                    return this.darkMode ? "sidebar-item-icon-selected-dark" :"sidebar-item-icon-selected-light"
                },   
                defaultAppTitleTextClass: function(){
                    return this.darkMode ? "sidebar-app-title-text-dark":"sidebar-app-title-text-light"
                },
                defaultSectionTitleClass: function(){
                    return this.darkMode ? "sidebar-section-title-text-dark":"sidebar-section-title-text-light"
                }
            },
            methods: {
                  initializeMenu() {                                           
                      this.topBarItems.forEach(m => this.setDefaultVisibility(m));
                      this.sideBarItems.forEach(m => {
                          this.setDefaultVisibility(m);
                          this.setItemsDefaultColors(m);
                      });
                      this.sideBarItems.forEach(m => this.setMenuIds(m));
                      this.setDefaultColors();
                      this.setSelectedMenu();                                          
                  },

                  setDefaultVisibility(m) {                    
                    //m.title = m.title + " ";
                    if (m.menuItems) {
                        m.menuItems.forEach(m => {
                            m.visible = (m.visible === undefined || m.visible === null) || m.visible;                            
                        });                          
                    }                      
                    const visibleIsNotDefined = m.visible === undefined || m.visible === null;
                    if (visibleIsNotDefined && m.menuItems) {
                        m.visible = m.menuItems.filter(m => m.visible).length > 0;
                    } else if (visibleIsNotDefined && ! m.menuItems) {
                        m.visible = true;
                    }                          
                  },
                  setDefaultColors(){
                      if(!this.appInfo.textClass) this.appInfo.textClass = this.defaultAppTitleTextClass;
                      if(!this.userInfo.textClass ) this.userInfo.textClass =  this.defaultTextClass;
                  },
                  setItemsDefaultColors(m){
                    if (m.menuItems) {
                        m.textClass = this.defaultSectionTitleClass;
                        m.menuItems.forEach(m => {                            
                            if(!m.textClass) m.textClass = this.defaultTextClass;
                            if(!m.iconClass) m.iconClass = this.defaultIconClass;
                        });
                    }  
                  },
                  setSelectedItemColors(menuItem){                      
                       menuItem.textClass = this.defaultSelectedTextClass;
                       menuItem.iconClass = this.defaultSelectedIconClass;
                  },
                  setMenuIds(m){                      
                      if (m.menuItems) {
                          m.menuItems.forEach(s=>{                                  
                            s.menuId = s.url.replace("/", "").replace(/\//g,'-').toLowerCase();                                                    
                          });
                      }
                  },
                  setSelectedMenu(){
                    this.sideBarItems.forEach(m => this.analizeSelectedMenu(m));
                  },
                  analizeSelectedMenu(m){
                      var controllerNamePrefix = "";
                      if(this.controlerArea){
                         controllerNamePrefix = this.controlerArea + "-";
                      }
                      m.menuItems.forEach(s => {
                          s.selected= (s.menuId == controllerNamePrefix + this.selectedMenu);
                          if(s.selected){
                              this.setSelectedItemColors(s);
                          }
                      });
                      m.selected = m.menuItems.filter(s=>s.selected).length > 0;
                  }
            }

         });
</script>

	<script>
			 Vue.config.devtools = true;
			 var shared_app_info = {
						  logo: "/images/junkode_logo.png",
						  name: "JunkodeApp",
						  version: "2022.09.13",
						  companyName: "GRUPO 1",
						  companyAddress: "FRM-UTN",
						  companyPhone: "2617111534",
						  facebookLink: "No hay facebook"
					  };
			 var menu = new Vue({
				  el: "#app_menu",
				  data: {
					  selectedMenu: 'project-newanalyze',
					  userInfo:{
						  userId: '00000000-0000-0000-0000-000000000000',
						  userInitials: 'GUEST_USER',
						  userName: 'GUEST_USER'
					  },
					  appInfo: shared_app_info,
					  topBarItems:[
							{
								title:"Primer Desplegable",
								url: null,
								icon: "",
								visible: true,
								menuItems:[
									{
                                      title: "Opcion1-PrimerDesplegable",
                                      url: "/Home",
                                      icon: "",
                                      visible: true
									},
									{
                                      title: "Opcion2-PrimerDesplegable",
                                      url: "/Home",
                                      icon: "",
                                      visible: true
									}
								]
							},
							{
								title:"Segundo Desplegable",
								url: null,
								icon: "",
								visible: true,
								menuItems:[
									{
                                      title: "Opcion1-SegundoDesplegable",
                                      url: "/Home",
                                      icon: "",
                                      visible: true
									},
									{
                                      title: "Opcion2-SegundoDesplegable",
                                      url: "/Home",
                                      icon: "",
                                      visible: true
									}
								]
							},
							{
								title:"Projects",
								url: "/Project",
								icon: "",
								visible: true,
							},
							{
								title:"Secure",
								url: "/Secure",
								icon: "",
								visible: true,
							},
							{
								title:"ANALISIS NUEVO RENZO MOGUL",
								url: "/Project/NewAnalyze",
								icon: "",
								visible: true,
							}
					  ],
					  sideBarItems:[
							{
                                title: "PrimerSeccion",
                                visible: true,
                                menuItems:[
                                   {
                                      title: "PrimerSeccion-PrimerOpcion",
                                      url: "/PrimerSeccion-PrimerOpcion",
                                      icon: "fa-cash-register"
                                   },
                                   {
                                      title: "PrimerSeccion-SegundaOpcion",
                                      url: "PrimerSeccion-SegundaOpcion",
                                      icon: "fa-user-edit"
                                   }
                                ]
                            },
							{
                                title: "SegundaSeccion",
                                visible: true,
                                menuItems:[
                                   {
                                      title: "SegundaSeccion-PrimerOpcion",
                                      url: "/SegundaSeccion-PrimerOpcion",
                                      icon: "fa-users-cog"
                                   }
                                ]
                            }
					  ]
				  }
			 });
			 var footer = new Vue({
				  el: "#app_footer",
				  data:{
					   appInfo: shared_app_info
				  }
			 });
	</script>

	

	<!-- Axios -->
	<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

	<!-- Selects -->
    <script src="/lib/select2/js/select2.js"></script>
    <script src="/lib/select2/js/i18n/es.js"></script>

	<!-- Componentes VUE-->
	<script src="/js/VueComponents/select2Vue.js"></script>

	<script>
		
        var pageSize = 30

        $(function () {

            const initialData = {"repoList":[{"id":525970824,"text":"DemoRepo","branchList":[{"text":"main","id":"07a8b67686065ea0bc79c79f2d66df7d88e9f235"}]}]};
            initialData.forgeryToken = $('input:hidden[name="__RequestVerificationToken"]').val();

            var app = new Vue({
                el: '#app',
                data: {
					repoData: {
                        id : null,
                        text : ''
                    },
                    repoList: initialData.repoList,
					branchList: [],
					branchData: {
						id : null,
						text : ''
					},
					isRepoSelected: false,
                    forgeryToken: initialData.forgeryToken
                },
				watch:{
					repoData(){
						this.branchList = []
						this.branchData = {
							id : null,
							text : ''
						}
						if(this.repoData.id == null || this.repoData.id == ''){
							this.isRepoSelected = false;
						}else{
							this.isRepoSelected = true;
							let repoSelected;
							this.repoList.forEach(repo => {
								let repoId = repo.id.toString();
								if(repoId == this.repoData.id){
									repoSelected = repo;
								}
							});
							this.branchList = repoSelected.branchList
						}
					}
				},
                methods: {
                    doAnalyze() {
                        let jsonData = {
                           repoId : this.repoData.id,
						   branchSha : this.branchData.id
                        };
                        const _this = this;
                        axios.post('/Analyzer/Do',
                            jsonData,
                            {
                                headers: { 'RequestVerificationToken': _this.forgeryToken },
                            }).then(function (response) {
                                _this.onSaveSuccessful(response);
                            }).catch(function (error) {
                                _this.onSaveErrors(error);
                            });
                    },
                    onSaveSuccessful(response) {
                        alert("correcto")
                    },
                    onSaveErrors(err) {
                        alert("error")
                    }
                }
            })
        });

	</script>


</body>
</html>
